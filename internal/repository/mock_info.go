// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/info.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "auth/internal/repository/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockInfoQuery is a mock of InfoQuery interface.
type MockInfoQuery struct {
	ctrl     *gomock.Controller
	recorder *MockInfoQueryMockRecorder
}

// MockInfoQueryMockRecorder is the mock recorder for MockInfoQuery.
type MockInfoQueryMockRecorder struct {
	mock *MockInfoQuery
}

// NewMockInfoQuery creates a new mock instance.
func NewMockInfoQuery(ctrl *gomock.Controller) *MockInfoQuery {
	mock := &MockInfoQuery{ctrl: ctrl}
	mock.recorder = &MockInfoQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoQuery) EXPECT() *MockInfoQueryMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockInfoQuery) GetUserInfo(id uuid.UUID) (entity.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", id)
	ret0, _ := ret[0].(entity.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockInfoQueryMockRecorder) GetUserInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockInfoQuery)(nil).GetUserInfo), id)
}

// InsertUserInfo mocks base method.
func (m *MockInfoQuery) InsertUserInfo(userId uuid.UUID, coins int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserInfo", userId, coins)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserInfo indicates an expected call of InsertUserInfo.
func (mr *MockInfoQueryMockRecorder) InsertUserInfo(userId, coins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserInfo", reflect.TypeOf((*MockInfoQuery)(nil).InsertUserInfo), userId, coins)
}

// UpdateCoins mocks base method.
func (m *MockInfoQuery) UpdateCoins(id uuid.UUID, balance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoins", id, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoins indicates an expected call of UpdateCoins.
func (mr *MockInfoQueryMockRecorder) UpdateCoins(id, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoins", reflect.TypeOf((*MockInfoQuery)(nil).UpdateCoins), id, balance)
}
