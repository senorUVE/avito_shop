// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transaction.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "auth/internal/repository/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTransQuery is a mock of TransQuery interface.
type MockTransQuery struct {
	ctrl     *gomock.Controller
	recorder *MockTransQueryMockRecorder
}

// MockTransQueryMockRecorder is the mock recorder for MockTransQuery.
type MockTransQueryMockRecorder struct {
	mock *MockTransQuery
}

// NewMockTransQuery creates a new mock instance.
func NewMockTransQuery(ctrl *gomock.Controller) *MockTransQuery {
	mock := &MockTransQuery{ctrl: ctrl}
	mock.recorder = &MockTransQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransQuery) EXPECT() *MockTransQueryMockRecorder {
	return m.recorder
}

// GetReceivedTransactions mocks base method.
func (m *MockTransQuery) GetReceivedTransactions(userId uuid.UUID) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedTransactions", userId)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedTransactions indicates an expected call of GetReceivedTransactions.
func (mr *MockTransQueryMockRecorder) GetReceivedTransactions(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedTransactions", reflect.TypeOf((*MockTransQuery)(nil).GetReceivedTransactions), userId)
}

// GetSentTransactions mocks base method.
func (m *MockTransQuery) GetSentTransactions(userId uuid.UUID) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTransactions", userId)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentTransactions indicates an expected call of GetSentTransactions.
func (mr *MockTransQueryMockRecorder) GetSentTransactions(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTransactions", reflect.TypeOf((*MockTransQuery)(nil).GetSentTransactions), userId)
}

// InsertTransaction mocks base method.
func (m *MockTransQuery) InsertTransaction(fromUser, toUser uuid.UUID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", fromUser, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransQueryMockRecorder) InsertTransaction(fromUser, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransQuery)(nil).InsertTransaction), fromUser, toUser, amount)
}
