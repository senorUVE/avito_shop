// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/user.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "auth/internal/repository/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserQuery is a mock of UserQuery interface.
type MockUserQuery struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryMockRecorder
}

// MockUserQueryMockRecorder is the mock recorder for MockUserQuery.
type MockUserQueryMockRecorder struct {
	mock *MockUserQuery
}

// NewMockUserQuery creates a new mock instance.
func NewMockUserQuery(ctrl *gomock.Controller) *MockUserQuery {
	mock := &MockUserQuery{ctrl: ctrl}
	mock.recorder = &MockUserQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQuery) EXPECT() *MockUserQueryMockRecorder {
	return m.recorder
}

// GetUserByPK mocks base method.
func (m *MockUserQuery) GetUserByPK(id uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPK", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPK indicates an expected call of GetUserByPK.
func (mr *MockUserQueryMockRecorder) GetUserByPK(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPK", reflect.TypeOf((*MockUserQuery)(nil).GetUserByPK), id)
}

// GetUserByUsername mocks base method.
func (m *MockUserQuery) GetUserByUsername(username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserQueryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserQuery)(nil).GetUserByUsername), username)
}

// GetUserIdByUsername mocks base method.
func (m *MockUserQuery) GetUserIdByUsername(username string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByUsername", username)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByUsername indicates an expected call of GetUserIdByUsername.
func (mr *MockUserQueryMockRecorder) GetUserIdByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByUsername", reflect.TypeOf((*MockUserQuery)(nil).GetUserIdByUsername), username)
}

// InsertUser mocks base method.
func (m *MockUserQuery) InsertUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserQueryMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserQuery)(nil).InsertUser), user)
}

// UpdateUser mocks base method.
func (m *MockUserQuery) UpdateUser(user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserQueryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserQuery)(nil).UpdateUser), user)
}
