// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/inventory.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "auth/internal/repository/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockInvQuery is a mock of InvQuery interface.
type MockInvQuery struct {
	ctrl     *gomock.Controller
	recorder *MockInvQueryMockRecorder
}

// MockInvQueryMockRecorder is the mock recorder for MockInvQuery.
type MockInvQueryMockRecorder struct {
	mock *MockInvQuery
}

// NewMockInvQuery creates a new mock instance.
func NewMockInvQuery(ctrl *gomock.Controller) *MockInvQuery {
	mock := &MockInvQuery{ctrl: ctrl}
	mock.recorder = &MockInvQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvQuery) EXPECT() *MockInvQueryMockRecorder {
	return m.recorder
}

// GetUserInventory mocks base method.
func (m *MockInvQuery) GetUserInventory(userId uuid.UUID) ([]entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInventory", userId)
	ret0, _ := ret[0].([]entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInventory indicates an expected call of GetUserInventory.
func (mr *MockInvQueryMockRecorder) GetUserInventory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInventory", reflect.TypeOf((*MockInvQuery)(nil).GetUserInventory), userId)
}

// InsertInventory mocks base method.
func (m *MockInvQuery) InsertInventory(userId uuid.UUID, itemType string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInventory", userId, itemType, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInventory indicates an expected call of InsertInventory.
func (mr *MockInvQueryMockRecorder) InsertInventory(userId, itemType, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInventory", reflect.TypeOf((*MockInvQuery)(nil).InsertInventory), userId, itemType, quantity)
}
