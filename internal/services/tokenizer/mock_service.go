// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/tokenizer/service.go

// Package tokenizer is a generated GoMock package.
package tokenizer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GeneratePair mocks base method.
func (m *MockService) GeneratePair(ctx context.Context, data map[string]any) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePair", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GeneratePair indicates an expected call of GeneratePair.
func (mr *MockServiceMockRecorder) GeneratePair(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePair", reflect.TypeOf((*MockService)(nil).GeneratePair), ctx, data)
}

// ParseClaims mocks base method.
func (m *MockService) ParseClaims(ctx context.Context, token string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, token)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockServiceMockRecorder) ParseClaims(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockService)(nil).ParseClaims), ctx, token)
}
