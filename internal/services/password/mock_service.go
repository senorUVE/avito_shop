// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/password/service.go

// Package password is a generated GoMock package.
package password

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateSalt mocks base method.
func (m *MockService) GenerateSalt(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSalt", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSalt indicates an expected call of GenerateSalt.
func (mr *MockServiceMockRecorder) GenerateSalt(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSalt", reflect.TypeOf((*MockService)(nil).GenerateSalt), ctx)
}

// GetSalt mocks base method.
func (m *MockService) GetSalt(ctx context.Context, hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalt", ctx, hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalt indicates an expected call of GetSalt.
func (mr *MockServiceMockRecorder) GetSalt(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalt", reflect.TypeOf((*MockService)(nil).GetSalt), ctx, hash)
}

// Hash mocks base method.
func (m *MockService) Hash(ctx context.Context, password, salt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", ctx, password, salt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockServiceMockRecorder) Hash(ctx, password, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockService)(nil).Hash), ctx, password, salt)
}
